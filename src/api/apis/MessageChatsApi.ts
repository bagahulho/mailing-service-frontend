/* tslint:disable */
/* eslint-disable */
/**
 * Mailing app
 * my api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DsErrorResp,
  DsOkResp,
} from '../models/index';
import {
    DsErrorRespFromJSON,
    DsErrorRespToJSON,
    DsOkRespFromJSON,
    DsOkRespToJSON,
} from '../models/index';

export interface MessageChatsDeleteMessageIdChatIdDeleteRequest {
    messageId: number;
    chatId: number;
}

export interface MessageChatsSwitchMessageIdChatIdPutRequest {
    messageId: number;
    chatId: number;
}

/**
 * 
 */
export class MessageChatsApi extends runtime.BaseAPI {

    /**
     * Удаляет чат с указанным ID из сообщения с указанным ID.
     * Удаление чата из сообщения
     */
    async messageChatsDeleteMessageIdChatIdDeleteRaw(requestParameters: MessageChatsDeleteMessageIdChatIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DsOkResp>> {
        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling messageChatsDeleteMessageIdChatIdDelete().'
            );
        }

        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling messageChatsDeleteMessageIdChatIdDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/message-chats/delete/{message_id}/{chat_id}`.replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters['messageId']))).replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters['chatId']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DsOkRespFromJSON(jsonValue));
    }

    /**
     * Удаляет чат с указанным ID из сообщения с указанным ID.
     * Удаление чата из сообщения
     */
    async messageChatsDeleteMessageIdChatIdDelete(requestParameters: MessageChatsDeleteMessageIdChatIdDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DsOkResp> {
        const response = await this.messageChatsDeleteMessageIdChatIdDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Переключает значение поля \"со звуком\" у чата в сообщении.
     * Переключение поля \"со звуком\"
     */
    async messageChatsSwitchMessageIdChatIdPutRaw(requestParameters: MessageChatsSwitchMessageIdChatIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DsOkResp>> {
        if (requestParameters['messageId'] == null) {
            throw new runtime.RequiredError(
                'messageId',
                'Required parameter "messageId" was null or undefined when calling messageChatsSwitchMessageIdChatIdPut().'
            );
        }

        if (requestParameters['chatId'] == null) {
            throw new runtime.RequiredError(
                'chatId',
                'Required parameter "chatId" was null or undefined when calling messageChatsSwitchMessageIdChatIdPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/message-chats/switch/{message_id}/{chat_id}`.replace(`{${"message_id"}}`, encodeURIComponent(String(requestParameters['messageId']))).replace(`{${"chat_id"}}`, encodeURIComponent(String(requestParameters['chatId']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DsOkRespFromJSON(jsonValue));
    }

    /**
     * Переключает значение поля \"со звуком\" у чата в сообщении.
     * Переключение поля \"со звуком\"
     */
    async messageChatsSwitchMessageIdChatIdPut(requestParameters: MessageChatsSwitchMessageIdChatIdPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DsOkResp> {
        const response = await this.messageChatsSwitchMessageIdChatIdPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
