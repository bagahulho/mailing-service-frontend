/* tslint:disable */
/* eslint-disable */
/**
 * Mailing app
 * my api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DsAuthResp,
  DsErrorResp,
  DsOkResp,
  DsUserRegisterReq,
  DsUserRegisterResp,
  DsUserRespReq,
  DsUserUpdateReq,
} from '../models/index';
import {
    DsAuthRespFromJSON,
    DsAuthRespToJSON,
    DsErrorRespFromJSON,
    DsErrorRespToJSON,
    DsOkRespFromJSON,
    DsOkRespToJSON,
    DsUserRegisterReqFromJSON,
    DsUserRegisterReqToJSON,
    DsUserRegisterRespFromJSON,
    DsUserRegisterRespToJSON,
    DsUserRespReqFromJSON,
    DsUserRespReqToJSON,
    DsUserUpdateReqFromJSON,
    DsUserUpdateReqToJSON,
} from '../models/index';

export interface UserLoginPostRequest {
    input: DsUserRespReq;
}

export interface UserRegPostRequest {
    input: DsUserRegisterReq;
}

export interface UserUpdatePutRequest {
    input: DsUserUpdateReq;
}

/**
 * 
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Аутентификация пользователя и получение JWT-токена.
     * Вход пользователя
     */
    async userLoginPostRaw(requestParameters: UserLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DsAuthResp>> {
        if (requestParameters['input'] == null) {
            throw new runtime.RequiredError(
                'input',
                'Required parameter "input" was null or undefined when calling userLoginPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/login`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DsUserRespReqToJSON(requestParameters['input']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DsAuthRespFromJSON(jsonValue));
    }

    /**
     * Аутентификация пользователя и получение JWT-токена.
     * Вход пользователя
     */
    async userLoginPost(requestParameters: UserLoginPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DsAuthResp> {
        const response = await this.userLoginPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Завершение текущей сессии пользователя.
     * Выход из системы
     */
    async userLogoutPostRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DsOkResp>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/user/logout`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DsOkRespFromJSON(jsonValue));
    }

    /**
     * Завершение текущей сессии пользователя.
     * Выход из системы
     */
    async userLogoutPost(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DsOkResp> {
        const response = await this.userLogoutPostRaw(initOverrides);
        return await response.value();
    }

    /**
     * Создает нового пользователя с указанными логином и паролем.
     * Регистрация пользователя
     */
    async userRegPostRaw(requestParameters: UserRegPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DsOkResp>> {
        if (requestParameters['input'] == null) {
            throw new runtime.RequiredError(
                'input',
                'Required parameter "input" was null or undefined when calling userRegPost().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        const response = await this.request({
            path: `/user/reg`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DsUserRegisterReqToJSON(requestParameters['input']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DsOkRespFromJSON(jsonValue));
    }

    /**
     * Создает нового пользователя с указанными логином и паролем.
     * Регистрация пользователя
     */
    async userRegPost(requestParameters: UserRegPostRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DsOkResp> {
        const response = await this.userRegPostRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Обновляет данные текущего пользователя.
     * Обновить данные пользователя
     */
    async userUpdatePutRaw(requestParameters: UserUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DsUserRegisterResp>> {
        if (requestParameters['input'] == null) {
            throw new runtime.RequiredError(
                'input',
                'Required parameter "input" was null or undefined when calling userUpdatePut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/user/update`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DsUserUpdateReqToJSON(requestParameters['input']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DsUserRegisterRespFromJSON(jsonValue));
    }

    /**
     * Обновляет данные текущего пользователя.
     * Обновить данные пользователя
     */
    async userUpdatePut(requestParameters: UserUpdatePutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DsUserRegisterResp> {
        const response = await this.userUpdatePutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
