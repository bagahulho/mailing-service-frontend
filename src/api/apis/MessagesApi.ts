/* tslint:disable */
/* eslint-disable */
/**
 * Mailing app
 * my api
 *
 * The version of the OpenAPI document: 1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  DsErrorResp,
  DsMessageDetail,
  DsMessageWithUsers,
  DsOkResp,
  DsUpdateMessageTextInput,
  DsUpdateMessageTextResp,
} from '../models/index';
import {
    DsErrorRespFromJSON,
    DsErrorRespToJSON,
    DsMessageDetailFromJSON,
    DsMessageDetailToJSON,
    DsMessageWithUsersFromJSON,
    DsMessageWithUsersToJSON,
    DsOkRespFromJSON,
    DsOkRespToJSON,
    DsUpdateMessageTextInputFromJSON,
    DsUpdateMessageTextInputToJSON,
    DsUpdateMessageTextRespFromJSON,
    DsUpdateMessageTextRespToJSON,
} from '../models/index';

export interface MessagesGetRequest {
    status?: string;
    startDate?: string;
    endDate?: string;
}

export interface MessagesIdDeleteDeleteRequest {
    id: number;
}

export interface MessagesIdFinishPutRequest {
    id: number;
}

export interface MessagesIdFormPutRequest {
    id: number;
}

export interface MessagesIdGetRequest {
    id: number;
}

export interface MessagesIdRejectPutRequest {
    id: number;
}

export interface MessagesIdTextPutRequest {
    id: number;
    message: DsUpdateMessageTextInput;
}

/**
 * 
 */
export class MessagesApi extends runtime.BaseAPI {

    /**
     * Возвращает список сообщений, отфильтрованных по статусу и диапазону дат.
     * Получить отфильтрованные сообщения
     */
    async messagesGetRaw(requestParameters: MessagesGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<DsMessageWithUsers>>> {
        const queryParameters: any = {};

        if (requestParameters['status'] != null) {
            queryParameters['status'] = requestParameters['status'];
        }

        if (requestParameters['startDate'] != null) {
            queryParameters['start_date'] = requestParameters['startDate'];
        }

        if (requestParameters['endDate'] != null) {
            queryParameters['end_date'] = requestParameters['endDate'];
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/messages`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(DsMessageWithUsersFromJSON));
    }

    /**
     * Возвращает список сообщений, отфильтрованных по статусу и диапазону дат.
     * Получить отфильтрованные сообщения
     */
    async messagesGet(requestParameters: MessagesGetRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<DsMessageWithUsers>> {
        const response = await this.messagesGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Устанавливает статус сообщения на \"удалён\".
     * Удалить сообщение
     */
    async messagesIdDeleteDeleteRaw(requestParameters: MessagesIdDeleteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DsOkResp>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling messagesIdDeleteDelete().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/messages/{id}/delete`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DsOkRespFromJSON(jsonValue));
    }

    /**
     * Устанавливает статус сообщения на \"удалён\".
     * Удалить сообщение
     */
    async messagesIdDeleteDelete(requestParameters: MessagesIdDeleteDeleteRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DsOkResp> {
        const response = await this.messagesIdDeleteDeleteRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Устанавливает статус сообщения на \"завершён\".
     * Завершить сообщение
     */
    async messagesIdFinishPutRaw(requestParameters: MessagesIdFinishPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DsOkResp>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling messagesIdFinishPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/messages/{id}/finish`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DsOkRespFromJSON(jsonValue));
    }

    /**
     * Устанавливает статус сообщения на \"завершён\".
     * Завершить сообщение
     */
    async messagesIdFinishPut(requestParameters: MessagesIdFinishPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DsOkResp> {
        const response = await this.messagesIdFinishPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Устанавливает статус сообщения на \"сформирован\".
     * Сформировать сообщение
     */
    async messagesIdFormPutRaw(requestParameters: MessagesIdFormPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DsOkResp>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling messagesIdFormPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/messages/{id}/form`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DsOkRespFromJSON(jsonValue));
    }

    /**
     * Устанавливает статус сообщения на \"сформирован\".
     * Сформировать сообщение
     */
    async messagesIdFormPut(requestParameters: MessagesIdFormPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DsOkResp> {
        const response = await this.messagesIdFormPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Возвращает полные данные о сообщении, включая чаты.
     * Получить сообщение по ID
     */
    async messagesIdGetRaw(requestParameters: MessagesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DsMessageDetail>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling messagesIdGet().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/messages/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DsMessageDetailFromJSON(jsonValue));
    }

    /**
     * Возвращает полные данные о сообщении, включая чаты.
     * Получить сообщение по ID
     */
    async messagesIdGet(requestParameters: MessagesIdGetRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DsMessageDetail> {
        const response = await this.messagesIdGetRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Устанавливает статус сообщения на \"отклонён\".
     * Отклонить сообщение
     */
    async messagesIdRejectPutRaw(requestParameters: MessagesIdRejectPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DsOkResp>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling messagesIdRejectPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/messages/{id}/reject`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DsOkRespFromJSON(jsonValue));
    }

    /**
     * Устанавливает статус сообщения на \"отклонён\".
     * Отклонить сообщение
     */
    async messagesIdRejectPut(requestParameters: MessagesIdRejectPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DsOkResp> {
        const response = await this.messagesIdRejectPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Обновляет текст сообщения по ID.
     * Обновить текст сообщения
     */
    async messagesIdTextPutRaw(requestParameters: MessagesIdTextPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DsUpdateMessageTextResp>> {
        if (requestParameters['id'] == null) {
            throw new runtime.RequiredError(
                'id',
                'Required parameter "id" was null or undefined when calling messagesIdTextPut().'
            );
        }

        if (requestParameters['message'] == null) {
            throw new runtime.RequiredError(
                'message',
                'Required parameter "message" was null or undefined when calling messagesIdTextPut().'
            );
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = await this.configuration.apiKey("Authorization"); // BearerAuth authentication
        }

        const response = await this.request({
            path: `/messages/{id}/text`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters['id']))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DsUpdateMessageTextInputToJSON(requestParameters['message']),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DsUpdateMessageTextRespFromJSON(jsonValue));
    }

    /**
     * Обновляет текст сообщения по ID.
     * Обновить текст сообщения
     */
    async messagesIdTextPut(requestParameters: MessagesIdTextPutRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DsUpdateMessageTextResp> {
        const response = await this.messagesIdTextPutRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
